if (debug) {
print(paste(level, parent_word, current_possibility))
}
if (sum(current_indexes) == 1 && length(current_indexes) > 1){
# End of recursion here
choice <- all_words[current_indexes, 1][["word"]][1]
expected_return <- 1
if (choice == parent_word){
choice <- NULL
expected_return <- 0
}
return(list(
choice = choice,
expected_return = expected_return,
tree = build_leaf_tree(choice, current_possibility, relative_prob, expected_return)
))
}
candidate_words <- find_candidates(all_words, current_indexes, initial_candidate)
candidate_possibilities <- list_along(candidate_words)
names(candidate_possibilities) <- candidate_words
entropies_computed <- FALSE
if (length(candidate_words) > explore_top){
entropies_computed <- TRUE
# In this case we filter by computing entropies first
expected_entropies <- rep_named(candidate_words, 0)
for (word in candidate_words){
possibilities <- get_possibilities(all_words, current_indexes, word)
candidate_possibilities[[word]] <- possibilities
expected_entropies[word] <- possibilities %>%
mutate(weighted_entropy = prob * entropy) %>%
select(weighted_entropy) %>%
sum
if (word %in% all_words[current_indexes, ][["word"]]){
# This is to avoid ties between words in the filtered list or not
expected_entropies[word] <- expected_entropies[word] - 0.000001
}
}
top_words <- head(sort(expected_entropies), explore_top)
# We exclude words that have 0.75 more entropy than the best one
top_words <- top_words %>% .[.< 0.75 + top_words[1]]
candidate_words <- names(top_words)
}
expected_returns <- rep_named(candidate_words, 100)
all_subtrees <- list_along(candidate_words)
names(all_subtrees) <- candidate_words
if (debug) {
print("candidate words...")
print(candidate_words)
print("filtered words...")
print(all_words[current_indexes, ][["word"]])
}
compare_possibilities <- sum(current_indexes) < 30
if (compare_possibilities) {
encoded_possibilities <- list_along(candidate_words)
names(encoded_possibilities) <- candidate_words
}
for (word in candidate_words){
all_subtrees[[word]] <- list()
# We had init it with a higher number foreseen the possibility of break
expected_returns[word] <- 0
if (level == 1){
print(paste("Exploring word... ", which(candidate_words == word)))
print(paste("Out of ", length(candidate_words), " words"))
}
if (debug) {
print(paste("exploring word " , word))
}
if (!is_null(candidate_possibilities[[word]])){
possibilities <- candidate_possibilities[[word]]
} else {
possibilities <- get_possibilities(all_words, current_indexes, word)
}
if (compare_possibilities) {
encoded_possibility <- encode_possibilities(current_indexes, possibilities)
if (any(encoded_possibilities %in% list(encoded_possibility))) {
print("Word excluded for possibility checked")
# print(encoded_possibility)
# print(encoded_possibilities)
next
} else {
encoded_possibilities[[word]] <- encoded_possibility
}
}
# If the split created by a word (encoded in the possibilities) has been explored, remove it from computation
# I need a way to encode a possibility using the different splits it generates.
for (possibility in 1:nrow(possibilities)){
output_subtree <- compute_subtree(
all_words,
current_indexes = possibilities[possibility, "filtered_words"][[1]][[1]],
explore_top = explore_top,
level = level + 1,
current_possibility = possibilities[possibility, "outcome"][[1]],
parent_word = word,
initial_candidate = NULL,
relative_prob = possibilities[possibility, "prob"][[1]],
debug = debug)
expected_returns[word] <- expected_returns[word] + output_subtree$expected_return * possibilities[possibility, "prob"][[1]]
all_subtrees[[word]][[possibilities[possibility, "outcome"][[1]]]] <- output_subtree$tree
}
if (expected_returns[word] < 1) {
# For example, if there are n remaining words and there is one word that
# both splits perfectly the data and is a valid guess, there is no better outcome
break
}
}
best <- min(expected_returns)
best_idx <- which.min(expected_returns)
if (entropies_computed) {
print(paste("Top word selected is ", best_idx, "Out of", length(candidate_words)))
print(paste("Entropies ", top_words))
print(paste("Returns ", expected_returns))
}
choice <- candidate_words[best_idx]
expected_return <- 1 + best
entropy <- entropy(all_words[current_indexes,][["prob"]])
current_tree <- build_current_tree(choice, expected_return, entropy, relative_prob, current_possibility, all_subtrees[[choice]])
return(
list(
choice = choice,
expected_return = expected_return,
tree = current_tree
)
)
}
# aireo_tree <- compute_subtree(words_df, words_df, level=0, initial_candidate="aireo")
aireo_tree <- compute_tree(words_df, initial_candidate="aireo", verbose=TRUE, debug=FALSE, explore_only=51:52)
print(aireo_tree, "relative_prob", "expected_moves", "move", "entropy")
compute_tree <- function(
all_words,
explore_top = 20,
initial_candidate = "aireo",
explore_only = NULL,
verbose=TRUE,
debug=FALSE) {
node <- Node$new("start")
node$move <- initial_candidate
node$relative_prob <- 1.0
node$entropy <- entropy(all_words[["prob"]])
expected_return <- 0
possibilities <- get_possibilities(all_words, TRUE, initial_candidate)
if (!is_null(explore_only)){
range_possibilities <- explore_only
} else {
range_possibilities <- 1:nrow(possibilities)
}
for (possibility in range_possibilities) {
print(paste("Exploring possibility... ", possibility))
print(paste("Out of ", nrow(possibilities), " possibilities"))
output_subtree <- compute_subtree(
all_words,
current_indexes = possibilities[possibility, "filtered_words"][[1]][[1]],
explore_top = explore_top,
level = 2 - verbose,
current_possibility = possibilities[possibility, "outcome"][[1]],
initial_candidate = NULL,
parent_word = initial_candidate,
relative_prob = possibilities[possibility, "prob"][[1]],
debug=debug)
expected_return <- expected_return + output_subtree$expected_return * possibilities[possibility, "prob"][[1]]
node$AddChildNode(output_subtree$tree)
if (debug) {
print(output_subtree$tree, "relative_prob", "expected_moves", "move", "entropy")
}
}
node$expected_moves <- expected_return + 1
node
}
# aireo_tree <- compute_subtree(words_df, words_df, level=0, initial_candidate="aireo")
aireo_tree <- compute_tree(words_df, initial_candidate="aireo", verbose=TRUE, debug=FALSE)
compute_subtree <- function(
all_words,
current_indexes = TRUE,
explore_top = 25,
level=1,
current_possibility="start",
parent_word="",
initial_candidate=NULL,
relative_prob=1.0,
debug=FALSE) {
# Instead of creating a lot of tibbles inside
if (debug) {
print(paste(level, parent_word, current_possibility))
}
if (sum(current_indexes) == 1 && length(current_indexes) > 1){
# End of recursion here
choice <- all_words[current_indexes, 1][["word"]][1]
expected_return <- 1
if (choice == parent_word){
choice <- NULL
expected_return <- 0
}
return(list(
choice = choice,
expected_return = expected_return,
tree = build_leaf_tree(choice, current_possibility, relative_prob, expected_return)
))
}
candidate_words <- find_candidates(all_words, current_indexes, initial_candidate)
candidate_possibilities <- list_along(candidate_words)
names(candidate_possibilities) <- candidate_words
entropies_computed <- FALSE
if (length(candidate_words) > explore_top){
entropies_computed <- TRUE
# In this case we filter by computing entropies first
expected_entropies <- rep_named(candidate_words, 0)
for (word in candidate_words){
possibilities <- get_possibilities(all_words, current_indexes, word)
candidate_possibilities[[word]] <- possibilities
expected_entropies[word] <- possibilities %>%
mutate(weighted_entropy = prob * entropy) %>%
select(weighted_entropy) %>%
sum
if (word %in% all_words[current_indexes, ][["word"]]){
# This is to avoid ties between words in the filtered list or not
expected_entropies[word] <- expected_entropies[word] - 0.000001
}
}
top_words <- head(sort(expected_entropies), explore_top)
# We exclude words that have 0.75 more entropy than the best one
top_words <- top_words %>% .[.< 0.75 + top_words[1]]
candidate_words <- names(top_words)
}
expected_returns <- rep_named(candidate_words, 100)
all_subtrees <- list_along(candidate_words)
names(all_subtrees) <- candidate_words
if (debug) {
print("candidate words...")
print(candidate_words)
print("filtered words...")
print(all_words[current_indexes, ][["word"]])
}
compare_possibilities <- sum(current_indexes) < 30
if (compare_possibilities) {
encoded_possibilities <- list_along(candidate_words)
names(encoded_possibilities) <- candidate_words
}
for (word in candidate_words){
all_subtrees[[word]] <- list()
# We had init it with a higher number foreseen the possibility of break
expected_returns[word] <- 0
if (level == 1){
print(paste("Exploring word... ", which(candidate_words == word)))
print(paste("Out of ", length(candidate_words), " words"))
}
if (debug) {
print(paste("exploring word " , word))
}
if (!is_null(candidate_possibilities[[word]])){
possibilities <- candidate_possibilities[[word]]
} else {
possibilities <- get_possibilities(all_words, current_indexes, word)
}
if (compare_possibilities) {
encoded_possibility <- encode_possibilities(current_indexes, possibilities)
if (any(encoded_possibilities %in% list(encoded_possibility))) {
if (debug) {
print("Word excluded for possibility checked")
print(encoded_possibility)
print(encoded_possibilities)
}
next
} else {
encoded_possibilities[[word]] <- encoded_possibility
}
}
# If the split created by a word (encoded in the possibilities) has been explored, remove it from computation
# I need a way to encode a possibility using the different splits it generates.
for (possibility in 1:nrow(possibilities)){
output_subtree <- compute_subtree(
all_words,
current_indexes = possibilities[possibility, "filtered_words"][[1]][[1]],
explore_top = explore_top,
level = level + 1,
current_possibility = possibilities[possibility, "outcome"][[1]],
parent_word = word,
initial_candidate = NULL,
relative_prob = possibilities[possibility, "prob"][[1]],
debug = debug)
expected_returns[word] <- expected_returns[word] + output_subtree$expected_return * possibilities[possibility, "prob"][[1]]
all_subtrees[[word]][[possibilities[possibility, "outcome"][[1]]]] <- output_subtree$tree
}
if (expected_returns[word] < 1) {
# For example, if there are n remaining words and there is one word that
# both splits perfectly the data and is a valid guess, there is no better outcome
break
}
}
best <- min(expected_returns)
best_idx <- which.min(expected_returns)
if (entropies_computed) {
print(paste("Top word selected is ", best_idx, "Out of", length(candidate_words)))
print(paste("Entropies ", top_words))
print(paste("Returns ", expected_returns))
}
choice <- candidate_words[best_idx]
expected_return <- 1 + best
entropy <- entropy(all_words[current_indexes,][["prob"]])
current_tree <- build_current_tree(choice, expected_return, entropy, relative_prob, current_possibility, all_subtrees[[choice]])
return(
list(
choice = choice,
expected_return = expected_return,
tree = current_tree
)
)
}
# aireo_tree <- compute_subtree(words_df, words_df, level=0, initial_candidate="aireo")
aireo_tree <- compute_tree(words_df, initial_candidate="aireo", verbose=TRUE, debug=FALSE)
aireo_tree_lst <- ToListExplicit(aireo_tree)
write_yaml(as.yaml(aireo_tree_lst), "./aireov3.yml")
library(yaml)
library(data.tree)
source("words.R")
words_df <- get_words_df()
source("utils2.R")
compute_tree <- function(
all_words,
explore_top = 20,
initial_candidate = "aireo",
explore_only = NULL,
verbose=TRUE,
debug=FALSE,
filename=NULL) {
node <- Node$new("start")
node$move <- initial_candidate
node$relative_prob <- 1.0
node$entropy <- entropy(all_words[["prob"]])
expected_return <- 0
possibilities <- get_possibilities(all_words, TRUE, initial_candidate)
if (!is_null(explore_only)){
range_possibilities <- explore_only
} else {
range_possibilities <- 1:nrow(possibilities)
}
for (possibility in range_possibilities) {
print(paste("Exploring possibility... ", possibility))
print(paste("Out of ", nrow(possibilities), " possibilities"))
output_subtree <- compute_subtree(
all_words,
current_indexes = possibilities[possibility, "filtered_words"][[1]][[1]],
explore_top = explore_top,
level = 2 - verbose,
current_possibility = possibilities[possibility, "outcome"][[1]],
initial_candidate = NULL,
parent_word = initial_candidate,
relative_prob = possibilities[possibility, "prob"][[1]],
debug=debug)
expected_return <- expected_return + output_subtree$expected_return * possibilities[possibility, "prob"][[1]]
node$AddChildNode(output_subtree$tree)
if (debug) {
print(output_subtree$tree, "relative_prob", "expected_moves", "move", "entropy")
}
}
node$expected_moves <- expected_return + 1
if (!is_null(filename)) {
nodelst <- ToListExplicit(node)
write_yaml(as.yaml(nodelst), filename)
}
node
}
toesa_tree <- compute_tree(words_df, initial_candidate="toesa", verbose=TRUE, debug=FALSE, explore_only=1:2, filename="./toesa.yml")
toesa_tree <- compute_tree(words_df, initial_candidate="toesa", verbose=TRUE, debug=FALSE, filename="./toesa.yml")
cesar_tree <- compute_tree(words_df, initial_candidate="cesar", verbose=TRUE, debug=FALSE, filename="./trees/cesar.yml")
install.packages(c(
"gapminder", "ggforce", "gh", "globals", "openintro", "profvis",
"RSQLite", "shiny", "shinycssloaders", "shinyFeedback",
"shinythemes", "testthat", "thematic", "vroom",
"waiter", "xml2", "zeallot", "rsconnect"
))
if (!require("pacman")) install.packages("pacman")
pacman::p_load(c(
"gapminder", "ggforce", "gh", "globals", "openintro", "profvis",
"RSQLite", "shiny", "shinycssloaders", "shinyFeedback",
"shinythemes", "testthat", "thematic", "vroom",
"waiter", "xml2", "zeallot", "rsconnect"
))
install.packages("BlocManager")
aireo_tree <- FromListExplicit(yaml.load(read_yaml("./trees/aireo.yml")))
aireo_tree
aireo_tree$move
readline(prompt="Enter result: ")
aireo_tree$isLeaf
play_game <- function(tree) {
while (!tree$isLeaf) {
print("Expected win on ")
print(tree$expected_moves)
print("Move ")
print(tree$move)
result <- reaIline(prompt="Enter result: ")
tree <- tree$result
}
}
play_game(aireo_tree)
result <- readline(prompt="Enter result: ")
play_game <- function(tree) {
while (!tree$isLeaf) {
print("Expected win on ")
print(tree$expected_moves)
print("Move ")
print(tree$move)
result <- readline(prompt="Enter result: ")
tree <- tree$result
}
}
play_game(aireo_tree)
aireo_tree$xo.xo
result
result <- readline(prompt="Enter result: ")
aireo_tree$result
aireo_tree[result]
aireo_tree[[result]]
play_game <- function(tree) {
while (!tree$isLeaf) {
print("Expected win on ")
print(tree$expected_moves)
print("Move ")
print(tree$move)
result <- readline(prompt="Enter result: ")
tree <- tree[[result]]
}
}
play_game(aireo_tree)
play_game(aireo_tree)
shiny::runApp('wordle')
runApp('wordle')
runApp('wordle')
runApp('wordle')
runApp('wordle')
runApp('wordle')
all_letters %>%
group_by(letter) %>%
summarize(frecuencia = sum(str_detect(all_words[["word"]], cur_group()[["letter"]])) / length(all_words[["word"]])) %>%
ggplot(aes(x=letter, y=frecuencia)) +
geom_bar(stat="identity")
all_letters <- tibble(letter = str_split("abcdefghijklmnñopqrstuvwxyz", "")[[1]])
all_words <- read_csv("data/words.csv", col_names = "word")
setwd("~/projects/R/wordle/wordle")
all_words <- read_csv("data/words.csv", col_names = "word")
all_letters %>%
group_by(letter) %>%
summarize(frecuencia = sum(str_detect(all_words[["word"]], cur_group()[["letter"]])) / length(all_words[["word"]])) %>%
ggplot(aes(x=letter, y=frecuencia)) +
geom_bar(stat="identity")
runApp()
runApp()
starter_entropies <- read_csv("data/entropies.csv")
View(starter_entropies)
runApp()
runApp()
runApp()
runApp()
runApp()
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(shinydashboard)
runApp('wordle')
runApp('wordle')
runApp('wordle')
runApp('wordle')
library(shinyjs)
runApp('wordle')
runApp('wordle')
runApp('wordle')
runApp('wordle')
runApp('wordle')
runApp('wordle')
runApp('wordle')
runApp('wordle')
runApp('wordle')
c(1, 2, 4) % 3
c(1, 2, 4) %% 3
runApp('wordle')
runApp('wordle')
runApp('wordle')
runApp('wordle')
runApp('wordle')
runApp('wordle')
runApp('wordle')
character(0)
length(character(0))
character(0)[1] <- 3
a <- character(0)
a[1] <- "a"
a
library(plyr)
mapvalues(c(1, 2, 4, 2, 1), c(1, 2, 4), c("x", "y", "z"))
source("scripts/utils.R")
setwd("~/projects/R/wordle/wordle")
source("scripts/utils.R")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::setAccountInfo(name='jaimearboleda',
token='1CE0D22F67354CCC506F3E90AB7A078B',
secret='<SECRET>')
rsconnect::setAccountInfo(name='jaimearboleda',
token='1CE0D22F67354CCC506F3E90AB7A078B',
secret='DZuhzb/6zYoW5QfdrUB8+vCDndQTqEG3weIyQqSG')
library(rsconnect)
rsconnect::deployApp('~/projects/R/wordle/wordle')
